{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as E } from \"@react-aria/focus\";\nimport { useHover as v } from \"@react-aria/interactions\";\nimport { useMemo as A } from \"react\";\nimport { useActivePress as g } from '../../hooks/use-active-press.js';\nimport { useId as _ } from '../../hooks/use-id.js';\nimport { useDisabled as D } from '../../internal/disabled.js';\nimport { useProvidedId as F } from '../../internal/id.js';\nimport { forwardRefWithAs as L, mergeProps as R, render as C } from '../../utils/render.js';\nimport { useDescribedBy as x } from '../description/description.js';\nimport { useLabelledBy as h } from '../label/label.js';\nlet H = \"select\";\nfunction B(a, i) {\n  let p = _(),\n    d = F(),\n    n = D(),\n    {\n      id: c = d || `headlessui-select-${p}`,\n      disabled: e = n || !1,\n      invalid: t = !1,\n      autoFocus: o = !1,\n      ...f\n    } = a,\n    m = h(),\n    u = x(),\n    {\n      isFocusVisible: r,\n      focusProps: T\n    } = E({\n      autoFocus: o\n    }),\n    {\n      isHovered: l,\n      hoverProps: b\n    } = v({\n      isDisabled: e\n    }),\n    {\n      pressed: s,\n      pressProps: y\n    } = g({\n      disabled: e\n    }),\n    P = R({\n      ref: i,\n      id: c,\n      \"aria-labelledby\": m,\n      \"aria-describedby\": u,\n      \"aria-invalid\": t ? \"\" : void 0,\n      disabled: e || void 0,\n      autoFocus: o\n    }, T, b, y),\n    S = A(() => ({\n      disabled: e,\n      invalid: t,\n      hover: l,\n      focus: r,\n      active: s,\n      autofocus: o\n    }), [e, t, l, r, s, o]);\n  return C({\n    ourProps: P,\n    theirProps: f,\n    slot: S,\n    defaultTag: H,\n    name: \"Select\"\n  });\n}\nlet $ = L(B);\nexport { $ as Select };","map":null,"metadata":{},"sourceType":"module"}