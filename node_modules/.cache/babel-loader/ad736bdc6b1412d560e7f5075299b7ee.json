{"ast":null,"code":"\"use client\";\n\nimport n, { Fragment as H, createContext as le, createRef as ae, useContext as ie, useEffect as pe, useMemo as E, useReducer as se, useRef as N } from \"react\";\nimport { useEscape as de } from '../../hooks/use-escape.js';\nimport { useEvent as A } from '../../hooks/use-event.js';\nimport { useId as I } from '../../hooks/use-id.js';\nimport { useInertOthers as ue } from '../../hooks/use-inert-others.js';\nimport { useIsTouchDevice as Te } from '../../hooks/use-is-touch-device.js';\nimport { useOnDisappear as fe } from '../../hooks/use-on-disappear.js';\nimport { useOutsideClick as ge } from '../../hooks/use-outside-click.js';\nimport { useOwnerDocument as me } from '../../hooks/use-owner.js';\nimport { MainTreeProvider as W, useMainTreeNode as ce, useRootContainers as De } from '../../hooks/use-root-containers.js';\nimport { useScrollLock as Pe } from '../../hooks/use-scroll-lock.js';\nimport { useServerHandoffComplete as ye } from '../../hooks/use-server-handoff-complete.js';\nimport { useSyncRefs as M } from '../../hooks/use-sync-refs.js';\nimport { CloseProvider as Ee } from '../../internal/close-provider.js';\nimport { ResetOpenClosedProvider as Ae, State as R, useOpenClosed as $ } from '../../internal/open-closed.js';\nimport { ForcePortalRoot as j } from '../../internal/portal-force-root.js';\nimport { match as _e } from '../../utils/match.js';\nimport { RenderFeatures as Y, forwardRefWithAs as _, render as x } from '../../utils/render.js';\nimport { Description as J, useDescriptions as Ce } from '../description/description.js';\nimport { FocusTrap as Fe, FocusTrapFeatures as C } from '../focus-trap/focus-trap.js';\nimport { Portal as be, PortalGroup as ve, useNestedPortals as Re } from '../portal/portal.js';\nimport { Transition as xe, TransitionChild as K } from '../transition/transition.js';\nvar Le = (o => (o[o.Open = 0] = \"Open\", o[o.Closed = 1] = \"Closed\", o))(Le || {}),\n  Oe = (t => (t[t.SetTitleId = 0] = \"SetTitleId\", t))(Oe || {});\nlet he = {\n    [0](e, t) {\n      return e.titleId === t.id ? e : {\n        ...e,\n        titleId: t.id\n      };\n    }\n  },\n  w = le(null);\nw.displayName = \"DialogContext\";\nfunction L(e) {\n  let t = ie(w);\n  if (t === null) {\n    let o = new Error(`<${e} /> is missing a parent <Dialog /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, L), o;\n  }\n  return t;\n}\nfunction Se(e, t) {\n  return _e(t.type, he, e, t);\n}\nlet X = _(function (t, o) {\n    let a = I(),\n      {\n        id: l = `headlessui-dialog-${a}`,\n        open: i,\n        onClose: p,\n        initialFocus: d,\n        role: s = \"dialog\",\n        autoFocus: c = !0,\n        __demoMode: f = !1,\n        unmount: D = !1,\n        ...O\n      } = t,\n      h = N(!1);\n    s = function () {\n      return s === \"dialog\" || s === \"alertdialog\" ? s : (h.current || (h.current = !0, console.warn(`Invalid role [${s}] passed to <Dialog />. Only \\`dialog\\` and and \\`alertdialog\\` are supported. Using \\`dialog\\` instead.`)), \"dialog\");\n    }();\n    let P = $();\n    i === void 0 && P !== null && (i = (P & R.Open) === R.Open);\n    let u = N(null),\n      V = M(u, o),\n      F = me(u),\n      T = i ? 0 : 1,\n      [b, q] = se(Se, {\n        titleId: null,\n        descriptionId: null,\n        panelRef: ae()\n      }),\n      g = A(() => p(!1)),\n      G = A(r => q({\n        type: 0,\n        id: r\n      })),\n      m = ye() ? T === 0 : !1,\n      [z, Q] = Re(),\n      Z = {\n        get current() {\n          var r;\n          return (r = b.panelRef.current) != null ? r : u.current;\n        }\n      },\n      v = ce(),\n      {\n        resolveContainers: S\n      } = De({\n        mainTreeNode: v,\n        portals: z,\n        defaultContainers: [Z]\n      }),\n      k = P !== null ? (P & R.Closing) === R.Closing : !1;\n    ue(f || k ? !1 : m, {\n      allowed: A(() => {\n        var r, U;\n        return [(U = (r = u.current) == null ? void 0 : r.closest(\"[data-headlessui-portal]\")) != null ? U : null];\n      }),\n      disallowed: A(() => {\n        var r;\n        return [(r = v == null ? void 0 : v.closest(\"body > *:not(#headlessui-portal-root)\")) != null ? r : null];\n      })\n    }), ge(m, S, r => {\n      r.preventDefault(), g();\n    }), de(m, F == null ? void 0 : F.defaultView, r => {\n      r.preventDefault(), r.stopPropagation(), document.activeElement && \"blur\" in document.activeElement && typeof document.activeElement.blur == \"function\" && document.activeElement.blur(), g();\n    }), Pe(f || k ? !1 : m, F, S), fe(m, u, g);\n    let [ee, te] = Ce(),\n      oe = E(() => [{\n        dialogState: T,\n        close: g,\n        setTitleId: G,\n        unmount: D\n      }, b], [T, b, g, G, D]),\n      B = E(() => ({\n        open: T === 0\n      }), [T]),\n      ne = {\n        ref: V,\n        id: l,\n        role: s,\n        tabIndex: -1,\n        \"aria-modal\": f ? void 0 : T === 0 ? !0 : void 0,\n        \"aria-labelledby\": b.titleId,\n        \"aria-describedby\": ee,\n        unmount: D\n      },\n      re = !Te(),\n      y = C.None;\n    return m && !f && (y |= C.RestoreFocus, y |= C.TabLock, c && (y |= C.AutoFocus), re && (y |= C.InitialFocus)), n.createElement(Ae, null, n.createElement(j, {\n      force: !0\n    }, n.createElement(be, null, n.createElement(w.Provider, {\n      value: oe\n    }, n.createElement(ve, {\n      target: u\n    }, n.createElement(j, {\n      force: !1\n    }, n.createElement(te, {\n      slot: B\n    }, n.createElement(Q, null, n.createElement(Fe, {\n      initialFocus: d,\n      initialFocusFallback: u,\n      containers: S,\n      features: y\n    }, n.createElement(Ee, {\n      value: g\n    }, x({\n      ourProps: ne,\n      theirProps: O,\n      slot: B,\n      defaultTag: Ie,\n      features: Me,\n      visible: T === 0,\n      name: \"Dialog\"\n    })))))))))));\n  }),\n  Ie = \"div\",\n  Me = Y.RenderStrategy | Y.Static;\nfunction we(e, t) {\n  let {\n      transition: o = !1,\n      open: a,\n      ...l\n    } = e,\n    i = $(),\n    p = e.hasOwnProperty(\"open\") || i !== null,\n    d = e.hasOwnProperty(\"onClose\");\n  if (!p && !d) throw new Error(\"You have to provide an `open` and an `onClose` prop to the `Dialog` component.\");\n  if (!p) throw new Error(\"You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.\");\n  if (!d) throw new Error(\"You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.\");\n  if (!i && typeof e.open != \"boolean\") throw new Error(`You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${e.open}`);\n  if (typeof e.onClose != \"function\") throw new Error(`You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${e.onClose}`);\n  return (a !== void 0 || o) && !l.static ? n.createElement(W, null, n.createElement(xe, {\n    show: a,\n    transition: o,\n    unmount: l.unmount\n  }, n.createElement(X, {\n    ref: t,\n    ...l\n  }))) : n.createElement(W, null, n.createElement(X, {\n    ref: t,\n    open: a,\n    ...l\n  }));\n}\nlet Ge = \"div\";\nfunction ke(e, t) {\n  let o = I(),\n    {\n      id: a = `headlessui-dialog-panel-${o}`,\n      transition: l = !1,\n      ...i\n    } = e,\n    [{\n      dialogState: p,\n      unmount: d\n    }, s] = L(\"Dialog.Panel\"),\n    c = M(t, s.panelRef),\n    f = E(() => ({\n      open: p === 0\n    }), [p]),\n    D = A(u => {\n      u.stopPropagation();\n    }),\n    O = {\n      ref: c,\n      id: a,\n      onClick: D\n    };\n  return n.createElement(l ? K : H, {\n    ...(l ? {\n      unmount: d\n    } : {})\n  }, x({\n    ourProps: O,\n    theirProps: i,\n    slot: f,\n    defaultTag: Ge,\n    name: \"Dialog.Panel\"\n  }));\n}\nlet Be = \"div\";\nfunction Ue(e, t) {\n  let {\n      transition: o = !1,\n      ...a\n    } = e,\n    [{\n      dialogState: l,\n      unmount: i\n    }] = L(\"Dialog.Backdrop\"),\n    p = E(() => ({\n      open: l === 0\n    }), [l]),\n    d = {\n      ref: t,\n      \"aria-hidden\": !0\n    };\n  return n.createElement(o ? K : H, {\n    ...(o ? {\n      unmount: i\n    } : {})\n  }, x({\n    ourProps: d,\n    theirProps: a,\n    slot: p,\n    defaultTag: Be,\n    name: \"Dialog.Backdrop\"\n  }));\n}\nlet He = \"h2\";\nfunction Ne(e, t) {\n  let o = I(),\n    {\n      id: a = `headlessui-dialog-title-${o}`,\n      ...l\n    } = e,\n    [{\n      dialogState: i,\n      setTitleId: p\n    }] = L(\"Dialog.Title\"),\n    d = M(t);\n  pe(() => (p(a), () => p(null)), [a, p]);\n  let s = E(() => ({\n    open: i === 0\n  }), [i]);\n  return x({\n    ourProps: {\n      ref: d,\n      id: a\n    },\n    theirProps: l,\n    slot: s,\n    defaultTag: He,\n    name: \"Dialog.Title\"\n  });\n}\nlet We = _(we),\n  $e = _(ke),\n  ct = _(Ue),\n  je = _(Ne),\n  Dt = J,\n  Pt = Object.assign(We, {\n    Panel: $e,\n    Title: je,\n    Description: J\n  });\nexport { Pt as Dialog, ct as DialogBackdrop, Dt as DialogDescription, $e as DialogPanel, je as DialogTitle };","map":null,"metadata":{},"sourceType":"module"}