{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as S } from \"@react-aria/focus\";\nimport { useHover as W } from \"@react-aria/interactions\";\nimport i, { useCallback as N, useMemo as V, useState as w } from \"react\";\nimport { useActivePress as J } from '../../hooks/use-active-press.js';\nimport { useControllable as $ } from '../../hooks/use-controllable.js';\nimport { useDefaultValue as j } from '../../hooks/use-default-value.js';\nimport { useDisposables as q } from '../../hooks/use-disposables.js';\nimport { useEvent as l } from '../../hooks/use-event.js';\nimport { useId as z } from '../../hooks/use-id.js';\nimport { useDisabled as Q } from '../../internal/disabled.js';\nimport { FormFields as Y } from '../../internal/form-fields.js';\nimport { useProvidedId as Z } from '../../internal/id.js';\nimport { isDisabledReactIssue7711 as ee } from '../../utils/bugs.js';\nimport { attemptSubmit as oe } from '../../utils/form.js';\nimport { forwardRefWithAs as te, mergeProps as re, render as ae } from '../../utils/render.js';\nimport { useDescribedBy as ne } from '../description/description.js';\nimport { Keys as y } from '../keyboard.js';\nimport { useLabelledBy as le } from '../label/label.js';\nlet se = \"span\";\nfunction ie(T, h) {\n  let C = z(),\n    k = Z(),\n    x = Q(),\n    {\n      id: g = k || `headlessui-checkbox-${C}`,\n      disabled: e = x || !1,\n      autoFocus: s = !1,\n      checked: E,\n      defaultChecked: v,\n      onChange: P,\n      name: d,\n      value: D,\n      form: R,\n      indeterminate: n = !1,\n      ...A\n    } = T,\n    r = j(v),\n    [a, t] = $(E, P, r != null ? r : !1),\n    F = le(),\n    K = ne(),\n    _ = q(),\n    [p, c] = w(!1),\n    u = l(() => {\n      c(!0), t == null || t(!a), _.nextFrame(() => {\n        c(!1);\n      });\n    }),\n    H = l(o => {\n      if (ee(o.currentTarget)) return o.preventDefault();\n      o.preventDefault(), u();\n    }),\n    B = l(o => {\n      o.key === y.Space ? (o.preventDefault(), u()) : o.key === y.Enter && oe(o.currentTarget);\n    }),\n    L = l(o => o.preventDefault()),\n    {\n      isFocusVisible: m,\n      focusProps: I\n    } = S({\n      autoFocus: s\n    }),\n    {\n      isHovered: f,\n      hoverProps: M\n    } = W({\n      isDisabled: e\n    }),\n    {\n      pressed: b,\n      pressProps: U\n    } = J({\n      disabled: e\n    }),\n    O = re({\n      ref: h,\n      id: g,\n      role: \"checkbox\",\n      \"aria-checked\": n ? \"mixed\" : a ? \"true\" : \"false\",\n      \"aria-labelledby\": F,\n      \"aria-describedby\": K,\n      \"aria-disabled\": e ? !0 : void 0,\n      indeterminate: n ? \"true\" : void 0,\n      tabIndex: e ? void 0 : 0,\n      onKeyUp: e ? void 0 : B,\n      onKeyPress: e ? void 0 : L,\n      onClick: e ? void 0 : H\n    }, I, M, U),\n    X = V(() => ({\n      checked: a,\n      disabled: e,\n      hover: f,\n      focus: m,\n      active: b,\n      indeterminate: n,\n      changing: p,\n      autofocus: s\n    }), [a, n, e, f, m, b, p, s]),\n    G = N(() => {\n      if (r !== void 0) return t == null ? void 0 : t(r);\n    }, [t, r]);\n  return i.createElement(i.Fragment, null, d != null && i.createElement(Y, {\n    disabled: e,\n    data: {\n      [d]: D || \"on\"\n    },\n    overrides: {\n      type: \"checkbox\",\n      checked: a\n    },\n    form: R,\n    onReset: G\n  }), ae({\n    ourProps: O,\n    theirProps: A,\n    slot: X,\n    defaultTag: se,\n    name: \"Checkbox\"\n  }));\n}\nlet Re = te(ie);\nexport { Re as Checkbox };","map":null,"metadata":{},"sourceType":"module"}