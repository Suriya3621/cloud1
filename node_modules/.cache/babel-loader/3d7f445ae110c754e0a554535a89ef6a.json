{"ast":null,"code":"import o, { createContext as H, useContext as E, useEffect as m, useState as u } from \"react\";\nimport { createPortal as g } from \"react-dom\";\nimport { useDisposables as h } from '../hooks/use-disposables.js';\nimport { objectToFormEntries as x } from '../utils/form.js';\nimport { compact as y } from '../utils/render.js';\nimport { Hidden as l, HiddenFeatures as d } from './hidden.js';\nlet f = H(null);\nfunction W(t) {\n  let [e, r] = u(null);\n  return o.createElement(f.Provider, {\n    value: {\n      target: e\n    }\n  }, t.children, o.createElement(l, {\n    features: d.Hidden,\n    ref: r\n  }));\n}\nfunction c({\n  children: t\n}) {\n  let e = E(f);\n  if (!e) return o.createElement(o.Fragment, null, t);\n  let {\n    target: r\n  } = e;\n  return r ? g(o.createElement(o.Fragment, null, t), r) : null;\n}\nfunction j({\n  data: t,\n  form: e,\n  disabled: r,\n  onReset: n,\n  overrides: F\n}) {\n  let [i, a] = u(null),\n    p = h();\n  return m(() => {\n    if (n && i) return p.addEventListener(i, \"reset\", n);\n  }, [i, e, n]), o.createElement(c, null, o.createElement(C, {\n    setForm: a,\n    formId: e\n  }), x(t).map(([s, v]) => o.createElement(l, {\n    features: d.Hidden,\n    ...y({\n      key: s,\n      as: \"input\",\n      type: \"hidden\",\n      hidden: !0,\n      readOnly: !0,\n      form: e,\n      disabled: r,\n      name: s,\n      value: v,\n      ...F\n    })\n  })));\n}\nfunction C({\n  setForm: t,\n  formId: e\n}) {\n  return m(() => {\n    if (e) {\n      let r = document.getElementById(e);\n      r && t(r);\n    }\n  }, [t, e]), e ? null : o.createElement(l, {\n    features: d.Hidden,\n    as: \"input\",\n    type: \"hidden\",\n    hidden: !0,\n    readOnly: !0,\n    ref: r => {\n      if (!r) return;\n      let n = r.closest(\"form\");\n      n && t(n);\n    }\n  });\n}\nexport { j as FormFields, W as FormFieldsProvider, c as HoistFormFields };","map":null,"metadata":{},"sourceType":"module"}