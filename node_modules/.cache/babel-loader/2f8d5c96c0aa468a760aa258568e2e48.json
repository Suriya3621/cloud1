{"ast":null,"code":"\"use client\";\n\nimport o, { useMemo as y } from \"react\";\nimport { useResolvedTag as F } from '../../hooks/use-resolved-tag.js';\nimport { useSyncRefs as b } from '../../hooks/use-sync-refs.js';\nimport { DisabledProvider as E, useDisabled as P } from '../../internal/disabled.js';\nimport { forwardRefWithAs as u, render as g } from '../../utils/render.js';\nimport { useLabels as D } from '../label/label.js';\nlet d = \"fieldset\";\nfunction A(t, i) {\n  var s;\n  let a = P(),\n    {\n      disabled: e = a || !1,\n      ...p\n    } = t,\n    [n, T] = F((s = t.as) != null ? s : d),\n    l = b(i, T),\n    [r, f] = D(),\n    m = y(() => ({\n      disabled: e\n    }), [e]);\n  return o.createElement(E, {\n    value: e\n  }, o.createElement(f, null, g({\n    ourProps: n === \"fieldset\" ? {\n      ref: l,\n      \"aria-labelledby\": r,\n      disabled: e || void 0\n    } : {\n      ref: l,\n      role: \"group\",\n      \"aria-labelledby\": r,\n      \"aria-disabled\": e || void 0\n    },\n    theirProps: p,\n    slot: m,\n    defaultTag: d,\n    name: \"Fieldset\"\n  })));\n}\nlet C = u(A);\nexport { C as Fieldset };","map":null,"metadata":{},"sourceType":"module"}