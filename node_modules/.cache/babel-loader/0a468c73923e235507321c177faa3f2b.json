{"ast":null,"code":"import { disposables as m } from '../../utils/disposables.js';\nimport { isIOS as u } from '../../utils/platform.js';\nfunction d() {\n  return u() ? {\n    before({\n      doc: r,\n      d: n,\n      meta: c\n    }) {\n      function o(a) {\n        return c.containers.flatMap(l => l()).some(l => l.contains(a));\n      }\n      n.microTask(() => {\n        var s;\n        if (window.getComputedStyle(r.documentElement).scrollBehavior !== \"auto\") {\n          let t = m();\n          t.style(r.documentElement, \"scrollBehavior\", \"auto\"), n.add(() => n.microTask(() => t.dispose()));\n        }\n        let a = (s = window.scrollY) != null ? s : window.pageYOffset,\n          l = null;\n        n.addEventListener(r, \"click\", t => {\n          if (t.target instanceof HTMLElement) try {\n            let e = t.target.closest(\"a\");\n            if (!e) return;\n            let {\n                hash: f\n              } = new URL(e.href),\n              i = r.querySelector(f);\n            i && !o(i) && (l = i);\n          } catch {}\n        }, !0), n.addEventListener(r, \"touchstart\", t => {\n          if (t.target instanceof HTMLElement) if (o(t.target)) {\n            let e = t.target;\n            for (; e.parentElement && o(e.parentElement);) e = e.parentElement;\n            n.style(e, \"overscrollBehavior\", \"contain\");\n          } else n.style(t.target, \"touchAction\", \"none\");\n        }), n.addEventListener(r, \"touchmove\", t => {\n          if (t.target instanceof HTMLElement) {\n            if (t.target.tagName === \"INPUT\") return;\n            if (o(t.target)) {\n              let e = t.target;\n              for (; e.parentElement && e.dataset.headlessuiPortal !== \"\" && !(e.scrollHeight > e.clientHeight || e.scrollWidth > e.clientWidth);) e = e.parentElement;\n              e.dataset.headlessuiPortal === \"\" && t.preventDefault();\n            } else t.preventDefault();\n          }\n        }, {\n          passive: !1\n        }), n.add(() => {\n          var e;\n          let t = (e = window.scrollY) != null ? e : window.pageYOffset;\n          a !== t && window.scrollTo(0, a), l && l.isConnected && (l.scrollIntoView({\n            block: \"nearest\"\n          }), l = null);\n        });\n      });\n    }\n  } : {};\n}\nexport { d as handleIOSLocking };","map":null,"metadata":{},"sourceType":"module"}