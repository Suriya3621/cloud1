{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as A } from \"@react-aria/focus\";\nimport { useHover as E } from \"@react-aria/interactions\";\nimport { useMemo as P } from \"react\";\nimport { useId as c } from '../../hooks/use-id.js';\nimport { useDisabled as R } from '../../internal/disabled.js';\nimport { useProvidedId as g } from '../../internal/id.js';\nimport { forwardRefWithAs as v, mergeProps as _, render as D } from '../../utils/render.js';\nimport { useDescribedBy as F } from '../description/description.js';\nimport { useLabelledBy as h } from '../label/label.js';\nlet L = \"textarea\";\nfunction H(s, l) {\n  let i = c(),\n    p = g(),\n    d = R(),\n    {\n      id: n = p || `headlessui-textarea-${i}`,\n      disabled: e = d || !1,\n      autoFocus: r = !1,\n      invalid: a = !1,\n      ...T\n    } = s,\n    f = h(),\n    m = F(),\n    {\n      isFocused: o,\n      focusProps: u\n    } = A({\n      autoFocus: r\n    }),\n    {\n      isHovered: t,\n      hoverProps: b\n    } = E({\n      isDisabled: e\n    }),\n    y = _({\n      ref: l,\n      id: n,\n      \"aria-labelledby\": f,\n      \"aria-describedby\": m,\n      \"aria-invalid\": a ? \"\" : void 0,\n      disabled: e || void 0,\n      autoFocus: r\n    }, u, b),\n    x = P(() => ({\n      disabled: e,\n      invalid: a,\n      hover: t,\n      focus: o,\n      autofocus: r\n    }), [e, a, t, o, r]);\n  return D({\n    ourProps: y,\n    theirProps: T,\n    slot: x,\n    defaultTag: L,\n    name: \"Textarea\"\n  });\n}\nlet w = v(H);\nexport { w as Textarea };","map":null,"metadata":{},"sourceType":"module"}