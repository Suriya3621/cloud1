{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as $ } from \"@react-aria/focus\";\nimport { useHover as q } from \"@react-aria/interactions\";\nimport i, { Fragment as z, createContext as Q, useCallback as Y, useContext as Z, useMemo as L, useRef as ee, useState as G } from \"react\";\nimport { useActivePress as te } from '../../hooks/use-active-press.js';\nimport { useControllable as oe } from '../../hooks/use-controllable.js';\nimport { useDefaultValue as re } from '../../hooks/use-default-value.js';\nimport { useDisposables as ne } from '../../hooks/use-disposables.js';\nimport { useEvent as m } from '../../hooks/use-event.js';\nimport { useId as le } from '../../hooks/use-id.js';\nimport { useResolveButtonType as ie } from '../../hooks/use-resolve-button-type.js';\nimport { useSyncRefs as ae } from '../../hooks/use-sync-refs.js';\nimport { useDisabled as se } from '../../internal/disabled.js';\nimport { FormFields as pe } from '../../internal/form-fields.js';\nimport { useProvidedId as ce } from '../../internal/id.js';\nimport { isDisabledReactIssue7711 as ue } from '../../utils/bugs.js';\nimport { attemptSubmit as de } from '../../utils/form.js';\nimport { forwardRefWithAs as me, mergeProps as fe, render as R } from '../../utils/render.js';\nimport { Description as be, useDescribedBy as he, useDescriptions as Te } from '../description/description.js';\nimport { Keys as A } from '../keyboard.js';\nimport { Label as ye, useLabelledBy as Se, useLabels as we } from '../label/label.js';\nlet S = Q(null);\nS.displayName = \"GroupContext\";\nlet _e = z;\nfunction Pe(n) {\n  var a;\n  let [o, p] = G(null),\n    [f, b] = we(),\n    [h, t] = Te(),\n    c = L(() => ({\n      switch: o,\n      setSwitch: p\n    }), [o, p]),\n    T = {},\n    y = n;\n  return i.createElement(t, {\n    name: \"Switch.Description\",\n    value: h\n  }, i.createElement(b, {\n    name: \"Switch.Label\",\n    value: f,\n    props: {\n      htmlFor: (a = c.switch) == null ? void 0 : a.id,\n      onClick(u) {\n        o && (u.currentTarget instanceof HTMLLabelElement && u.preventDefault(), o.click(), o.focus({\n          preventScroll: !0\n        }));\n      }\n    }\n  }, i.createElement(S.Provider, {\n    value: c\n  }, R({\n    ourProps: T,\n    theirProps: y,\n    slot: {},\n    defaultTag: _e,\n    name: \"Switch.Group\"\n  }))));\n}\nlet Ee = \"button\";\nfunction De(n, o) {\n  var C;\n  let p = le(),\n    f = ce(),\n    b = se(),\n    {\n      id: h = f || `headlessui-switch-${p}`,\n      disabled: t = b || !1,\n      checked: c,\n      defaultChecked: T,\n      onChange: y,\n      name: a,\n      value: u,\n      form: F,\n      autoFocus: d = !1,\n      ...k\n    } = n,\n    w = Z(S),\n    _ = ee(null),\n    H = ae(_, o, w === null ? null : w.setSwitch),\n    l = re(T),\n    [s, r] = oe(c, y, l != null ? l : !1),\n    M = ne(),\n    [P, E] = G(!1),\n    D = m(() => {\n      E(!0), r == null || r(!s), M.nextFrame(() => {\n        E(!1);\n      });\n    }),\n    U = m(e => {\n      if (ue(e.currentTarget)) return e.preventDefault();\n      e.preventDefault(), D();\n    }),\n    I = m(e => {\n      e.key === A.Space ? (e.preventDefault(), D()) : e.key === A.Enter && de(e.currentTarget);\n    }),\n    B = m(e => e.preventDefault()),\n    K = Se(),\n    W = he(),\n    {\n      isFocusVisible: g,\n      focusProps: O\n    } = $({\n      autoFocus: d\n    }),\n    {\n      isHovered: v,\n      hoverProps: N\n    } = q({\n      isDisabled: t\n    }),\n    {\n      pressed: x,\n      pressProps: J\n    } = te({\n      disabled: t\n    }),\n    V = L(() => ({\n      checked: s,\n      disabled: t,\n      hover: v,\n      focus: g,\n      active: x,\n      autofocus: d,\n      changing: P\n    }), [s, v, g, x, t, P, d]),\n    X = fe({\n      id: h,\n      ref: H,\n      role: \"switch\",\n      type: ie(n, _),\n      tabIndex: n.tabIndex === -1 ? 0 : (C = n.tabIndex) != null ? C : 0,\n      \"aria-checked\": s,\n      \"aria-labelledby\": K,\n      \"aria-describedby\": W,\n      disabled: t || void 0,\n      autoFocus: d,\n      onClick: U,\n      onKeyUp: I,\n      onKeyPress: B\n    }, O, N, J),\n    j = Y(() => {\n      if (l !== void 0) return r == null ? void 0 : r(l);\n    }, [r, l]);\n  return i.createElement(i.Fragment, null, a != null && i.createElement(pe, {\n    disabled: t,\n    data: {\n      [a]: u || \"on\"\n    },\n    overrides: {\n      type: \"checkbox\",\n      checked: s\n    },\n    form: F,\n    onReset: j\n  }), R({\n    ourProps: X,\n    theirProps: k,\n    slot: V,\n    defaultTag: Ee,\n    name: \"Switch\"\n  }));\n}\nlet ge = me(De),\n  ve = Pe,\n  xe = ye,\n  Ce = be,\n  qe = Object.assign(ge, {\n    Group: ve,\n    Label: xe,\n    Description: Ce\n  });\nexport { qe as Switch, Ce as SwitchDescription, ve as SwitchGroup, xe as SwitchLabel };","map":null,"metadata":{},"sourceType":"module"}