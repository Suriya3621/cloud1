{"ast":null,"code":"import { useRef as r } from \"react\";\nimport { useEvent as c } from './use-event.js';\nimport { useEventListener as i } from './use-event-listener.js';\nfunction f(l) {\n  let n = r({\n    value: \"\",\n    selectionStart: null,\n    selectionEnd: null\n  });\n  return i(l.current, \"blur\", e => {\n    let t = e.target;\n    t instanceof HTMLInputElement && (n.current = {\n      value: t.value,\n      selectionStart: t.selectionStart,\n      selectionEnd: t.selectionEnd\n    });\n  }), c(() => {\n    let e = l.current;\n    if (document.activeElement !== e && e instanceof HTMLInputElement && e.isConnected) {\n      if (e.focus({\n        preventScroll: !0\n      }), e.value !== n.current.value) e.setSelectionRange(e.value.length, e.value.length);else {\n        let {\n          selectionStart: t,\n          selectionEnd: u\n        } = n.current;\n        t !== null && u !== null && e.setSelectionRange(t, u);\n      }\n      n.current = {\n        value: \"\",\n        selectionStart: null,\n        selectionEnd: null\n      };\n    }\n  });\n}\nexport { f as useRefocusableInput };","map":null,"metadata":{},"sourceType":"module"}