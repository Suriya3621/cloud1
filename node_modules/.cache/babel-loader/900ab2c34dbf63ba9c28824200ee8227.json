{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as y } from \"@react-aria/focus\";\nimport { useHover as b } from \"@react-aria/interactions\";\nimport { useMemo as P } from \"react\";\nimport { useActivePress as B } from '../../hooks/use-active-press.js';\nimport { useDisabled as c } from '../../internal/disabled.js';\nimport { forwardRefWithAs as A, mergeProps as g, render as _ } from '../../utils/render.js';\nlet v = \"button\";\nfunction E(a, u) {\n  var p;\n  let l = c(),\n    {\n      disabled: e = l || !1,\n      autoFocus: t = !1,\n      ...o\n    } = a,\n    {\n      isFocusVisible: r,\n      focusProps: i\n    } = y({\n      autoFocus: t\n    }),\n    {\n      isHovered: s,\n      hoverProps: T\n    } = b({\n      isDisabled: e\n    }),\n    {\n      pressed: n,\n      pressProps: f\n    } = B({\n      disabled: e\n    }),\n    m = g({\n      ref: u,\n      type: (p = o.type) != null ? p : \"button\",\n      disabled: e || void 0,\n      autoFocus: t\n    }, i, T, f),\n    d = P(() => ({\n      disabled: e,\n      hover: s,\n      focus: r,\n      active: n,\n      autofocus: t\n    }), [e, s, r, n, t]);\n  return _({\n    ourProps: m,\n    theirProps: o,\n    slot: d,\n    defaultTag: v,\n    name: \"Button\"\n  });\n}\nlet h = A(E);\nexport { h as Button };","map":null,"metadata":{},"sourceType":"module"}