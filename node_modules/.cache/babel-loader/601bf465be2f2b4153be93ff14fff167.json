{"ast":null,"code":"\"use client\";\n\nimport { useFocusRing as Q } from \"@react-aria/focus\";\nimport { useHover as Y } from \"@react-aria/interactions\";\nimport m, { Fragment as K, createContext as x, useContext as L, useEffect as j, useMemo as R, useReducer as Z, useRef as A } from \"react\";\nimport { useActivePress as ee } from '../../hooks/use-active-press.js';\nimport { useEvent as C } from '../../hooks/use-event.js';\nimport { useId as W } from '../../hooks/use-id.js';\nimport { useResolveButtonType as te } from '../../hooks/use-resolve-button-type.js';\nimport { optionalRef as ne, useSyncRefs as v } from '../../hooks/use-sync-refs.js';\nimport { transitionDataAttributes as oe, useTransition as re } from '../../hooks/use-transition.js';\nimport { CloseProvider as le } from '../../internal/close-provider.js';\nimport { OpenClosedProvider as se, ResetOpenClosedProvider as ie, State as I, useOpenClosed as ue } from '../../internal/open-closed.js';\nimport { isDisabledReactIssue7711 as ae } from '../../utils/bugs.js';\nimport { match as O } from '../../utils/match.js';\nimport { getOwnerDocument as pe } from '../../utils/owner.js';\nimport { RenderFeatures as $, forwardRefWithAs as _, mergeProps as J, render as B, useMergeRefsFn as X } from '../../utils/render.js';\nimport { startTransition as ce } from '../../utils/start-transition.js';\nimport { Keys as b } from '../keyboard.js';\nvar de = (r => (r[r.Open = 0] = \"Open\", r[r.Closed = 1] = \"Closed\", r))(de || {}),\n  fe = (t => (t[t.ToggleDisclosure = 0] = \"ToggleDisclosure\", t[t.CloseDisclosure = 1] = \"CloseDisclosure\", t[t.SetButtonId = 2] = \"SetButtonId\", t[t.SetPanelId = 3] = \"SetPanelId\", t[t.LinkPanel = 4] = \"LinkPanel\", t[t.UnlinkPanel = 5] = \"UnlinkPanel\", t))(fe || {});\nlet Te = {\n    [0]: e => ({\n      ...e,\n      disclosureState: O(e.disclosureState, {\n        [0]: 1,\n        [1]: 0\n      })\n    }),\n    [1]: e => e.disclosureState === 1 ? e : {\n      ...e,\n      disclosureState: 1\n    },\n    [4](e) {\n      return e.linkedPanel === !0 ? e : {\n        ...e,\n        linkedPanel: !0\n      };\n    },\n    [5](e) {\n      return e.linkedPanel === !1 ? e : {\n        ...e,\n        linkedPanel: !1\n      };\n    },\n    [2](e, n) {\n      return e.buttonId === n.buttonId ? e : {\n        ...e,\n        buttonId: n.buttonId\n      };\n    },\n    [3](e, n) {\n      return e.panelId === n.panelId ? e : {\n        ...e,\n        panelId: n.panelId\n      };\n    }\n  },\n  M = x(null);\nM.displayName = \"DisclosureContext\";\nfunction F(e) {\n  let n = L(M);\n  if (n === null) {\n    let r = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(r, F), r;\n  }\n  return n;\n}\nlet k = x(null);\nk.displayName = \"DisclosureAPIContext\";\nfunction V(e) {\n  let n = L(k);\n  if (n === null) {\n    let r = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(r, V), r;\n  }\n  return n;\n}\nlet H = x(null);\nH.displayName = \"DisclosurePanelContext\";\nfunction De() {\n  return L(H);\n}\nfunction Pe(e, n) {\n  return O(n.type, Te, e, n);\n}\nlet ye = K;\nfunction me(e, n) {\n  let {\n      defaultOpen: r = !1,\n      ...c\n    } = e,\n    s = A(null),\n    d = v(n, ne(u => {\n      s.current = u;\n    }, e.as === void 0 || e.as === K)),\n    t = A(null),\n    o = A(null),\n    l = Z(Pe, {\n      disclosureState: r ? 0 : 1,\n      linkedPanel: !1,\n      buttonRef: o,\n      panelRef: t,\n      buttonId: null,\n      panelId: null\n    }),\n    [{\n      disclosureState: f,\n      buttonId: i\n    }, T] = l,\n    p = C(u => {\n      T({\n        type: 1\n      });\n      let P = pe(s);\n      if (!P || !i) return;\n      let y = (() => u ? u instanceof HTMLElement ? u : u.current instanceof HTMLElement ? u.current : P.getElementById(i) : P.getElementById(i))();\n      y == null || y.focus();\n    }),\n    E = R(() => ({\n      close: p\n    }), [p]),\n    D = R(() => ({\n      open: f === 0,\n      close: p\n    }), [f, p]),\n    g = {\n      ref: d\n    };\n  return m.createElement(M.Provider, {\n    value: l\n  }, m.createElement(k.Provider, {\n    value: E\n  }, m.createElement(le, {\n    value: p\n  }, m.createElement(se, {\n    value: O(f, {\n      [0]: I.Open,\n      [1]: I.Closed\n    })\n  }, B({\n    ourProps: g,\n    theirProps: c,\n    slot: D,\n    defaultTag: ye,\n    name: \"Disclosure\"\n  })))));\n}\nlet Ee = \"button\";\nfunction ge(e, n) {\n  let r = W(),\n    {\n      id: c = `headlessui-disclosure-button-${r}`,\n      disabled: s = !1,\n      autoFocus: d = !1,\n      ...t\n    } = e,\n    [o, l] = F(\"Disclosure.Button\"),\n    f = De(),\n    i = f === null ? !1 : f === o.panelId,\n    T = A(null),\n    p = v(T, n, i ? null : o.buttonRef),\n    E = X();\n  j(() => {\n    if (!i) return l({\n      type: 2,\n      buttonId: c\n    }), () => {\n      l({\n        type: 2,\n        buttonId: null\n      });\n    };\n  }, [c, l, i]);\n  let D = C(a => {\n      var S;\n      if (i) {\n        if (o.disclosureState === 1) return;\n        switch (a.key) {\n          case b.Space:\n          case b.Enter:\n            a.preventDefault(), a.stopPropagation(), l({\n              type: 0\n            }), (S = o.buttonRef.current) == null || S.focus();\n            break;\n        }\n      } else switch (a.key) {\n        case b.Space:\n        case b.Enter:\n          a.preventDefault(), a.stopPropagation(), l({\n            type: 0\n          });\n          break;\n      }\n    }),\n    g = C(a => {\n      switch (a.key) {\n        case b.Space:\n          a.preventDefault();\n          break;\n      }\n    }),\n    u = C(a => {\n      var S;\n      ae(a.currentTarget) || s || (i ? (l({\n        type: 0\n      }), (S = o.buttonRef.current) == null || S.focus()) : l({\n        type: 0\n      }));\n    }),\n    {\n      isFocusVisible: P,\n      focusProps: y\n    } = Q({\n      autoFocus: d\n    }),\n    {\n      isHovered: U,\n      hoverProps: h\n    } = Y({\n      isDisabled: s\n    }),\n    {\n      pressed: N,\n      pressProps: w\n    } = ee({\n      disabled: s\n    }),\n    q = R(() => ({\n      open: o.disclosureState === 0,\n      hover: U,\n      active: N,\n      disabled: s,\n      focus: P,\n      autofocus: d\n    }), [o, U, N, P, s, d]),\n    G = te(e, T),\n    z = i ? J({\n      ref: p,\n      type: G,\n      disabled: s || void 0,\n      autoFocus: d,\n      onKeyDown: D,\n      onClick: u\n    }, y, h, w) : J({\n      ref: p,\n      id: c,\n      type: G,\n      \"aria-expanded\": o.disclosureState === 0,\n      \"aria-controls\": o.linkedPanel ? o.panelId : void 0,\n      disabled: s || void 0,\n      autoFocus: d,\n      onKeyDown: D,\n      onKeyUp: g,\n      onClick: u\n    }, y, h, w);\n  return B({\n    mergeRefs: E,\n    ourProps: z,\n    theirProps: t,\n    slot: q,\n    defaultTag: Ee,\n    name: \"Disclosure.Button\"\n  });\n}\nlet Se = \"div\",\n  be = $.RenderStrategy | $.Static;\nfunction Re(e, n) {\n  let r = W(),\n    {\n      id: c = `headlessui-disclosure-panel-${r}`,\n      transition: s = !1,\n      ...d\n    } = e,\n    [t, o] = F(\"Disclosure.Panel\"),\n    {\n      close: l\n    } = V(\"Disclosure.Panel\"),\n    f = X(),\n    i = v(n, t.panelRef, u => {\n      ce(() => o({\n        type: u ? 4 : 5\n      }));\n    });\n  j(() => (o({\n    type: 3,\n    panelId: c\n  }), () => {\n    o({\n      type: 3,\n      panelId: null\n    });\n  }), [c, o]);\n  let T = ue(),\n    [p, E] = re(s, t.panelRef, T !== null ? (T & I.Open) === I.Open : t.disclosureState === 0),\n    D = R(() => ({\n      open: t.disclosureState === 0,\n      close: l\n    }), [t.disclosureState, l]),\n    g = {\n      ref: i,\n      id: c,\n      ...oe(E)\n    };\n  return m.createElement(ie, null, m.createElement(H.Provider, {\n    value: t.panelId\n  }, B({\n    mergeRefs: f,\n    ourProps: g,\n    theirProps: d,\n    slot: D,\n    defaultTag: Se,\n    features: be,\n    visible: p,\n    name: \"Disclosure.Panel\"\n  })));\n}\nlet Ae = _(me),\n  Ce = _(ge),\n  Ie = _(Re),\n  We = Object.assign(Ae, {\n    Button: Ce,\n    Panel: Ie\n  });\nexport { We as Disclosure, Ce as DisclosureButton, Ie as DisclosurePanel };","map":null,"metadata":{},"sourceType":"module"}